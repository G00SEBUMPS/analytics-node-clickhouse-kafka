import { randomBytes } from 'node:crypto';
import type { FastifyInstance } from 'fastify';
import AdminJS from 'adminjs';
import { buildAuthenticatedRouter } from '@adminjs/fastify';

import AdminJSSequelize from '@adminjs/sequelize';
import { ApiKey, RateLimitCounter } from '../db/models.js';
AdminJS.registerAdapter(AdminJSSequelize);

interface ActionRequest {
  payload: Record<string, any>;
}

interface ActionResponse {
  record: {
    id: string;
    params: Record<string, any>;
  };
}

export const setupAdmin = async (app: FastifyInstance): Promise<void> => {
  const admin = new AdminJS({
    resources: [
      {
        resource: ApiKey,
        options: {
          navigation: { name: 'API Management', icon: 'Key' },
          properties: {
            id: { 
              isVisible: false,
              isId: true,
              type: 'string'
            },
            key: { 
              isVisible: { list: true, show: true, edit: false },
              isDisabled: true,
              type: 'string',
              description: 'Auto-generated API key'
            },
            name: { 
              isTitle: true,
              type: 'string',
              isRequired: true,
              description: 'Descriptive name for the API key'
            },
            allowed_ips: {
              type: 'string',
              description: 'Comma-separated list of allowed IPs (leave empty to allow all IPs)',
              custom: {
                stringify: (value: any) => value ? value.toString() : '',
              }
            },
            rate_limit_requests: { 
              type: 'number',
              isRequired: true,
              description: 'Maximum number of requests allowed per time window',
              min: 1,
              default: 1000
            },
            rate_limit_window: { 
              type: 'number',
              isRequired: true,
              description: 'Time window in seconds for rate limiting',
              min: 1,
              default: 60
            },
            active: { 
              type: 'boolean',
              isRequired: true,
              description: 'Whether this API key is active'
            },
            created_at: { 
              isVisible: { list: true, edit: false },
              isDisabled: true,
              type: 'datetime'
            },
            updated_at: { 
              isVisible: { list: true, edit: false },
              isDisabled: true,
              type: 'datetime'
            }
          },
          listProperties: ['key', 'name', 'active', 'created_at'],
          showProperties: ['key', 'name', 'allowed_ips', 'rate_limit_requests', 'rate_limit_window', 'active', 'created_at', 'updated_at'],
          editProperties: ['name', 'allowed_ips', 'rate_limit_requests', 'rate_limit_window', 'active'],
          actions: {
            new: {
              before: async (request: ActionRequest) => {
                const now = new Date().toISOString();
                request.payload = {
                  ...request.payload,
                  // id and key will be auto-generated by Sequelize
                  active: true,
                  rate_limit_requests: request.payload.rate_limit_requests || 1000,
                  rate_limit_window: request.payload.rate_limit_window || 60,
                  allowed_ips: request.payload.allowed_ips || null,
                  created_at: now,
                  updated_at: now,
                };
                return request;
              },
              after: async (response: ActionResponse) => {
                // Ensure the response includes valid data
                if (!response.record.id) {
                  throw new Error('Failed to create API key - ID is required');
                }
                return response;
              }
            },
            edit: {
              before: async (request: ActionRequest) => {
                request.payload = {
                  ...request.payload,
                  updated_at: new Date().toISOString(),
                  // Prevent changing key or id
                  key: undefined,
                  id: undefined,
                };
                return request;
              }
            }
          },
        }
      },
      {
        resource: RateLimitCounter,
        options: {
          navigation: { name: 'API Management', icon: 'Activity' },
          properties: {
            api_key_id: { reference: 'ApiKey' },
            window_start: { isVisible: { list: true, show: true } },
            request_count: { isVisible: { list: true, show: true } }
          },
          actions: {
            new: { isAccessible: false },
            edit: { isAccessible: false },
            delete: { isAccessible: false },
          },
        }
      }
    ],
    branding: {
      companyName: 'Analytics Admin',
      logo: false,
    },
    dashboard: {
      handler: async () => {
        return { some: 'stats' };
      },
    },
  });

  // Enable development mode bundler
  if (process.env.NODE_ENV === 'development') {
    admin.watch();
  }

  // Initialize the admin panel
  await admin.initialize();

  // Configure authentication
  const authConfig = {
    authenticate: async (email: string, password: string) => {
      if (email === process.env.ADMIN_EMAIL && password === process.env.ADMIN_PASSWORD) {
        return Promise.resolve({ email });
      }
      return null;
    },
    cookieName: 'adminjs',
    cookiePassword: process.env.COOKIE_SECRET || 'this-is-a-very-long-secret-key-for-cookies-32',
  };

  // Build the authenticated router
  await buildAuthenticatedRouter(admin, authConfig, app);
};

function generateApiKey(): string {
  return 'ak_' + randomBytes(32).toString('hex');
}